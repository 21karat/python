#python中的数据类型
print ('整数')
'''
Python可以处理任意大小的整数，当然包括负整数，在Python程序中，整数的表示方法和数学上的写法一模一样，
例如：1，100，-8080，0，等等。
'''
print ('浮点数')
'''
浮点数也就是小数
整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），
而浮点数运算则可能会有四舍五入的误差。
'''
print ('字符串')
'''
字符串是以''或""括起来的任意文本，比如'abc'，"xyz"等等。
请注意，''或""本身只是一种表示方式，不是字符串的一部分，
因此，字符串'abc'只有a，b，c这3个字符。
'''
print ('布尔值')
'''
布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，
在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来。

布尔值可以用and、or和not运算。

and运算是与运算，只有所有都为 True，and运算结果才是 True。

or运算是或运算，只要其中有一个为 True，or 运算结果就是 True。

not运算是非运算，它是一个单目运算符，把 True 变成 False，False 变成 True。
'''
print ('空值')
'''
空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。
'''
print ('练习')
print(15678+0x12fd2)
print('Learn Python in imooc')
print(100<99)
print(0xff==255)

print('变量')
'''
在Python中，变量的概念基本上和初中代数的方程变量是一致的。
例如，对于方程式 y=x*x ，x就是变量。当x=2时，计算结果是4，当x=5时，计算结果是25。

只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。
在Python程序中，变量是用一个变量名表示，变量名必须是大小写英文、数字和下划线（_）的组合，且不能用数字开头，比如：
a = 1
变量a是一个整数。
t_007 = 'T007'
变量t_007是一个字符串。

在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：
a = 123    # a是整数
print a
a = 'imooc'   # a变为字符串
print a
这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。

静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（// 表示注释）：
int a = 123; // a是整数类型变量
a = "mooc"; // 错误：不能把字符串赋给整型变量
和静态语言相比，动态语言更灵活，就是这个原因。

请不要把赋值语句的等号等同于数学的等号。比如下面的代码：
x = 10
x = x + 2
如果从数学上理解x = x + 2那无论如何是不成立的，在程序中，赋值语句先计算右侧的表达式x + 2，得到结果12，再赋给变量x。
由于x之前的值是10，重新赋值后，x的值变成12。

最后，理解变量在计算机内存中的表示也非常重要。当我们写：a = 'ABC'时，Python解释器干了两件事情：
1. 在内存中创建了一个'ABC'的字符串；
2. 在内存中创建了一个名为a的变量，并把它指向'ABC'。
也可以把一个变量a赋值给另一个变量b，这个操作实际上是把变量b指向变量a所指向的数据，例如下面的代码：
a = 'ABC'
b = a
a = 'XYZ'
print b
最后一行打印出变量b的内容到底是'ABC'呢还是'XYZ'？如果从数学意义上理解，就会错误地得出b和a相同，也应该是'XYZ'，
但实际上b的值是'ABC'，让我们一行一行地执行代码，就可以看到到底发生了什么事：

执行a = 'ABC'，解释器创建了字符串  'ABC'和变量 a，并把a指向 'ABC'：
执行b = a，解释器创建了变量 b，并把b指向 a 指向的字符串'ABC'：
执行a = 'XYZ'，解释器创建了字符串'XYZ'，并把a的指向改为'XYZ'，但b并没有更改：
所以，最后打印变量b的结果自然是'ABC'了。
'''
print('1 4 7 10 13 16 19 ...前 100 项的和?')
x1 = 1
d = 3
n = 100
x100 = (n-d+x1)*n/2
s = x100
print (s)

print('字符串')
'''
前面我们讲解了什么是字符串。字符串可以用''或者""括起来表示。
如果字符串本身包含'怎么办？比如我们要表示字符串 I'm OK ，这时，可以用" "括起来表示：
"I'm OK"
类似的，如果字符串包含"，我们就可以用' '括起来表示：
'Learn "Python" in imooc'
如果字符串既包含'又包含"怎么办？
这个时候，就需要对字符串的某些特殊字符进行“转义”，Python字符串用\进行转义。
要表示字符串 Bob said "I'm OK".
由于 ' 和 " 会引起歧义，因此，我们在它前面插入一个\表示这是一个普通字符，不代表字符串的起始，因此，这个字符串又可以表示为
'Bob said \"I\'m OK\".'
注意：转义字符 \ 不计入字符串的内容中。

常用的转义字符还有：
\n 表示换行
\t 表示一个制表符
\\ 表示 \ 字符本身
'''
s = 'Python was started in 1989 by \"Guido\".\nPython is free and easy to learn.'
print (s)

print('raw字符串与多行字符串')
'''
如果一个字符串包含很多需要转义的字符，对每一个字符都进行转义会很麻烦。
为了避免这种情况，我们可以在字符串前面加个前缀 r ，表示这是一个 raw 字符串，里面的字符就不需要转义了。例如：
r'\(~_~)/ \(~_~)/'
'''
print (r'''"To be, or not to be": that is the question.Whether it's nobler in the mind to suffer.''')

print('整数与浮点数')
'''
Python支持对整数和浮点数直接进行四则混合运算，运算规则和数学上的四则运算规则完全一致。
基本的运算：
1 + 2 + 3   # ==> 6
4 * 5 - 6   # ==> 14
7.5 / 8 + 2.1   # ==> 3.0375
使用括号可以提升优先级，这和数学运算完全一致，注意只能使用小括号，但是括号可以嵌套很多层：
(1 + 2) * 3    # ==> 9
(2.2 + 3.3) / (1.5 * (9 - 0.3))    # ==> 0.42145593869731807

和数学运算不同的地方是，Python的整数运算结果仍然是整数，浮点数运算结果仍然是浮点数：
1 + 2    # ==> 整数 3
1.0 + 2.0    # ==> 浮点数 3.0

但是整数和浮点数混合运算的结果就变成浮点数了：
1 + 2.0    # ==> 浮点数 3.0

为什么要区分整数运算和浮点数运算呢？这是因为整数运算的结果永远是精确的，
而浮点数运算的结果不一定精确，因为计算机内存再大，也无法精确表示出无限循环小数，
比如 0.1 换成二进制表示就是无限循环小数。

那整数的除法运算遇到除不尽的时候，结果难道不是浮点数吗？我们来试一下：11 / 4    # ==> 2
令很多初学者惊讶的是，Python的整数除法，即使除不尽，结果仍然是整数，余数直接被扔掉。
不过，Python提供了一个求余的运算 % 可以计算余数：11 % 4    # ==> 3

如果我们要计算 11 / 4 的精确结果，按照“整数和浮点数混合运算的结果是浮点数”的法则，
把两个数中的一个变成浮点数再运算就没问题了：11.0 / 4    # ==> 2.75
'''
print (2.5 + 10 / 4)
print (2.5+2.5)
print (10.0%4)
print (10.0/4)
print (2.5 + 10.0/4)

print('布尔类型')
'''
布尔类型有以下几种运算：
与运算：只有两个布尔值都为 True 时，计算结果才为 True。
True and True   # ==> True
True and False   # ==> False
False and True   # ==> False
False and False   # ==> False
或运算：只要有一个布尔值为 True，计算结果就是 True。
True or True   # ==> True
True or False   # ==> True
False or True   # ==> True
False or False   # ==> False
非运算：把True变为False，或者把False变为True：
not True   # ==> False
not False   # ==> True

布尔运算在计算机中用来做条件判断，根据计算结果为True或者False，计算机可以自动执行不同的后续代码。
在Python中，布尔类型还可以与其他数据类型做 and、or和not运算，请看下面的代码：a = True   print a and 'a=T' or 'a=F'

计算结果不是布尔类型，而是字符串 'a=T'，这是为什么呢？
因为Python把0、空字符串''和None看成 False，其他数值和非空字符串都看成 True，所以：
True and 'a=T' 计算结果是 'a=T'
继续计算 'a=T' or 'a=F' 计算结果还是 'a=T'
要解释上述结果，又涉及到 and 和 or 运算的一条重要法则：短路计算。

1. 在计算 a and b 时，如果 a 是 False，则根据与运算法则，整个结果必定为 False，因此返回 a；
如果 a 是 True，则整个计算结果必定取决与 b，因此返回 b。
2. 在计算 a or b 时，如果 a 是 True，则根据或运算法则，整个计算结果必定为 True，因此返回 a；
如果 a 是 False，则整个计算结果必定取决于 b，因此返回 b。
所以Python解释器在做布尔运算时，只要能提前确定计算结果，它就不会往后算了，直接返回结果。
'''